class Node
    attr_accessor :val
    attr_accessor :left
    attr_accessor :right

    def initialize(val)
        @val = val
    end
end

class DepthFirstSearch

    def getNode(node, val)
        stack = []
        stack.push(node)
        until(stack.empty?)
            next_node = stack.pop
            p next_node.val
            if(next_node.val == val)
                puts "We found #{val}" 
                return next_node
            end
            if(next_node.right != nil)
                stack.push(next_node.right)
            end
            if(next_node.left != nil)
                stack.push(next_node.left)
            end
        end
        puts "Didn't find #{val}"
    end
end

node = Node.new 3 
node_two = Node.new 4 
node_three = Node.new 5 
node_four = Node.new 6
node_five = Node.new 7
node_six = Node.new 8
node_seven = Node.new 9
node.left = node_two
node.right = node_three
node_two.left = node_four
node_two.right = node_five
node_three.left = node_six
node_three.right = node_seven
dfs = DepthFirstSearch.new
random_int = rand(9)
puts "looking for #{random_int}"
dfs.getNode(node, random_int)

            